// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4959.StaleyRobotics2014.subsystems;

import org.usfirst.frc4959.StaleyRobotics2014.RobotMap;
import org.usfirst.frc4959.StaleyRobotics2014.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 * Lucas Walter, what a hack
 */
public class DriveTrain extends Subsystem
    {

    SpeedController rightVictor = RobotMap.driveTrainRightVictor;
    SpeedController leftVictor = RobotMap.driveTrainLeftVictor;
    RobotDrive robotDrive = RobotMap.robotDriveTrain;

    //Has the sensitivity set to highest when it starts up.
    private int sensitivityLevel = 5;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand()
        {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveWithJoysticks());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
        }

    public void falconDrive(double left, double right)
        {
        double leftPower = changeSpeed(left, sensitivity(sensitivityLevel));
        double rightPower = changeSpeed(right, sensitivity(sensitivityLevel));
        robotDrive.tankDrive(leftPower, rightPower);
        }

    public void takeJoystickInputs(double left, double right)
        {
        falconDrive(left, right);
        }

    public void stop()
        {
        robotDrive.drive(0, 0);
        }

    public void decreaseSensitivity()
        {
        if (sensitivityLevel > 1)
            {
            sensitivityLevel--;
            }

        }

    public void increaseSensitivity()
        {
        if (sensitivityLevel < 5)
            {
            sensitivityLevel++;
            }
        }

    /*This method returns the sensitivity to the drive train depending on the sensitivityLevel
    **This method brought to you by Ian Eugene Collins and from contributions from viewers like you
    **Thank You!
    */
    public double sensitivity(int sensitivityLevel)
        {

        double sensitivity;

        switch (sensitivityLevel)
            {

            case 1:
                sensitivity = 0.6;
                break;
            case 2:
                sensitivity = 0.7;
                break;
            case 3:
                sensitivity = 0.8;
                break;
            case 4:
                sensitivity = 0.9;
                break;
            case 5:
                sensitivity = 1.0;
                break;
            default:
                sensitivity = 1.0;
                break;
            }
        System.out.println(sensitivityLevel);
        return (sensitivity);
        }

    public static double changeSpeed(double input, double sensitivity)
        {
        return (sensitivity * input);
        }
    }
